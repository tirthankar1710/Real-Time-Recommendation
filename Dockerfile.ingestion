# # Dockerfile.ingestion
# FROM public.ecr.aws/lambda/python:3.12

# # WORKDIR /src

# # Install GCC and required build tools
# RUN dnf install -y gcc gcc-c++ python3-devel

# # Copy the requirements.txt file into the container
# COPY requirements.txt .

# # Install the dependencies
# RUN pip install --no-cache-dir -r requirements.txt

# # Copy shared modules
# COPY config/config.yaml config/config.yaml 
# COPY params.yaml params.yaml
# COPY schema.yaml schema.yaml
# COPY src/__init__.py src/__init__.py
# COPY src/config /src/config
# COPY src/constants /src/constants
# COPY src/utils /src/utils
# COPY src/static /src/static
# COPY src/entity /src/entity

# # Copy pipeline and its required component
# COPY src/pipelines/data_ingestion_pipeline.py src/pipelines/data_ingestion_pipeline.py
# COPY src/pipelines/__init__.py src/pipelines/__init__.py
# COPY src/components/data_ingestion.py src/components/data_ingestion.py
# COPY src/components/__init__.py src/components/__init__.py

# # Set the entry point for the pipeline
# CMD ["src.pipelines.data_ingestion_pipeline.lambda_handler"]

# Dockerfile.ingestion
FROM public.ecr.aws/lambda/python:3.12

# Install GCC and required build tools
RUN dnf install -y gcc gcc-c++ python3-devel

# Set the working directory inside the container
WORKDIR /var/task

# Copy the requirements file
COPY requirements.txt .

# Install Python dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Copy the entire `src` directory and other necessary files
COPY config/config.yaml config/config.yaml 
COPY params.yaml params.yaml
COPY schema.yaml schema.yaml
COPY src/ /var/task/src/

# Set the entry point for the Lambda function
CMD ["src.pipelines.data_ingestion_pipeline.lambda_handler"]
