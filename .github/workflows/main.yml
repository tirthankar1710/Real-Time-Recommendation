name: workflow

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'

permissions:
  id-token: write
  contents: read

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Lint code
        run: echo "Linting repository"

      - name: Run unit tests
        run: echo "Running unit tests"

  build-and-push-ecr-image:
    name: Continuous Delivery
    needs: integration
    runs-on: ubuntu-latest
    strategy:
      matrix:
        stage:
          - { dockerfile: "Dockerfile.ingestion", image: "data-ingestion-image", lambda: "data-ingestion-lambda" }
          - { dockerfile: "Dockerfile.validation", image: "data-validation-image", lambda: "data-validation-lambda" }
          - { dockerfile: "Dockerfile.transformation", image: "data-transformation-image", lambda: "data-transformation-lambda" }
          - { dockerfile: "Dockerfile.trainer", image: "model-trainer-image", lambda: "model-trainer-lambda" }
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
        run: |
          IMAGE_URI=$ECR_REGISTRY/${{ matrix.stage.image }}:$IMAGE_TAG
          docker build -f ${{ matrix.stage.dockerfile }} -t $IMAGE_URI .
          docker push $IMAGE_URI
    
  update-lambda-functions:
    name: Continuous Deployment
    needs: build-and-push-ecr-image
    runs-on: ubuntu-latest
    strategy:
      matrix:
        stage:
          - { dockerfile: "Dockerfile.ingestion", image: "data-ingestion-image", lambda: "data-ingestion-lambda" }
          - { dockerfile: "Dockerfile.validation", image: "data-validation-image", lambda: "data-validation-lambda" }
          - { dockerfile: "Dockerfile.transformation", image: "data-transformation-image", lambda: "data-transformation-lambda" }
          - { dockerfile: "Dockerfile.trainer", image: "model-trainer-image", lambda: "model-trainer-lambda" }
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Update Lambda Function
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          IMAGE_URI=$ECR_REGISTRY//${{ matrix.stage.image }}:$IMAGE_TAG
          aws lambda update-function-code \
            --function-name ${{ matrix.stage.lambda }} \
            --image-uri $IMAGE_URI